//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace CryptoCompare
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial interface IClient
    {
        /// <summary>Single Symbol Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PriceAsync(bool? tryConversion, string fsym, string tsyms, string e, string extraParams, bool? sign);
    
        /// <summary>Single Symbol Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> PriceAsync(bool? tryConversion, string fsym, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Multiple Symbols Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PricemultiAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign);
    
        /// <summary>Multiple Symbols Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> PricemultiAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Multiple Symbols Full Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PricemultifullAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign);
    
        /// <summary>Multiple Symbols Full Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> PricemultifullAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Generate Custom Average</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> GenerateAvgAsync(string fsym, string tsym, string e, string extraParams, bool? sign);
    
        /// <summary>Generate Custom Average</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> GenerateAvgAsync(string fsym, string tsym, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Historical Daily OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="allData">Returns all data (only available on histo day)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> HistodayAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, bool? allData, string toTs, string extraParams, bool? sign);
    
        /// <summary>Historical Daily OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="allData">Returns all data (only available on histo day)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> HistodayAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, bool? allData, string toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Historical Hourly OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> HistohourAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, string toTs, string extraParams, bool? sign);
    
        /// <summary>Historical Hourly OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> HistohourAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, string toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Historical Minute OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> HistominuteAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, string toTs, string extraParams, bool? sign);
    
        /// <summary>Historical Minute OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> HistominuteAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, string toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Historical Day OHLCV for a timestamp</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="ts">The unix timestamp of interest</param>
        /// <param name="calculationType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> PricehistoricalAsync(bool? tryConversion, string fsym, string tsyms, string e, int? ts, CalculationType? calculationType, string extraParams, bool? sign);
    
        /// <summary>Historical Day OHLCV for a timestamp</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="ts">The unix timestamp of interest</param>
        /// <param name="calculationType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> PricehistoricalAsync(bool? tryConversion, string fsym, string tsyms, string e, int? ts, CalculationType? calculationType, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Historical Day Average Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="avgType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="uTCHourDiff">By deafult it does UTC, if you want a different time zone just pass the hour difference. For PST you would pass -8 for example.</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> DayAvgAsync(bool? tryConversion, string fsym, string tsym, string e, string toTs, AvgType? avgType, int? uTCHourDiff, string extraParams, bool? sign);
    
        /// <summary>Historical Day Average Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="avgType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="uTCHourDiff">By deafult it does UTC, if you want a different time zone just pass the hour difference. For PST you would pass -8 for example.</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> DayAvgAsync(bool? tryConversion, string fsym, string tsym, string e, string toTs, AvgType? avgType, int? uTCHourDiff, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>All the Exchanges and Trading Pairs</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> ExchangesAsync(string extraParams, bool? sign);
    
        /// <summary>All the Exchanges and Trading Pairs</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> ExchangesAsync(string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>All the Coins</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> CoinlistAsync(string extraParams, bool? sign);
    
        /// <summary>All the Coins</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> CoinlistAsync(string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Rate limits for your IP</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> LimitAsync();
    
        /// <summary>Rate limits for your IP</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<object> LimitAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class Client : IClient
    {
        private string _baseUrl = "";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public Client(string baseUrl)
        {
            BaseUrl = baseUrl; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Single Symbol Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PriceAsync(bool? tryConversion, string fsym, string tsyms, string e, string extraParams, bool? sign)
        {
            return PriceAsync(tryConversion, fsym, tsyms, e, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Single Symbol Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> PriceAsync(bool? tryConversion, string fsym, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsyms == null)
                throw new System.ArgumentNullException("tsyms");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/price?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsyms=").Append(System.Uri.EscapeDataString(ConvertToString(tsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Multiple Symbols Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PricemultiAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign)
        {
            return PricemultiAsync(tryConversion, fsyms, tsyms, e, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Multiple Symbols Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> PricemultiAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsyms == null)
                throw new System.ArgumentNullException("fsyms");
    
            if (tsyms == null)
                throw new System.ArgumentNullException("tsyms");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/pricemulti?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsyms=").Append(System.Uri.EscapeDataString(ConvertToString(fsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsyms=").Append(System.Uri.EscapeDataString(ConvertToString(tsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Multiple Symbols Full Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PricemultifullAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign)
        {
            return PricemultifullAsync(tryConversion, fsyms, tsyms, e, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Multiple Symbols Full Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> PricemultifullAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsyms == null)
                throw new System.ArgumentNullException("fsyms");
    
            if (tsyms == null)
                throw new System.ArgumentNullException("tsyms");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/pricemultifull?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsyms=").Append(System.Uri.EscapeDataString(ConvertToString(fsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsyms=").Append(System.Uri.EscapeDataString(ConvertToString(tsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Generate Custom Average</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> GenerateAvgAsync(string fsym, string tsym, string e, string extraParams, bool? sign)
        {
            return GenerateAvgAsync(fsym, tsym, e, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Generate Custom Average</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> GenerateAvgAsync(string fsym, string tsym, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsym == null)
                throw new System.ArgumentNullException("tsym");
    
            if (e == null)
                throw new System.ArgumentNullException("e");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/generateAvg?");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsym=").Append(System.Uri.EscapeDataString(ConvertToString(tsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Historical Daily OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="allData">Returns all data (only available on histo day)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> HistodayAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, bool? allData, string toTs, string extraParams, bool? sign)
        {
            return HistodayAsync(tryConversion, fsym, tsym, e, aggregate, limit, allData, toTs, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Historical Daily OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="allData">Returns all data (only available on histo day)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> HistodayAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, bool? allData, string toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsym == null)
                throw new System.ArgumentNullException("tsym");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/histoday?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsym=").Append(System.Uri.EscapeDataString(ConvertToString(tsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (aggregate != null) urlBuilder_.Append("aggregate=").Append(System.Uri.EscapeDataString(ConvertToString(aggregate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (allData != null) urlBuilder_.Append("allData=").Append(System.Uri.EscapeDataString(ConvertToString(allData, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toTs != null) urlBuilder_.Append("toTs=").Append(System.Uri.EscapeDataString(ConvertToString(toTs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Historical Hourly OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> HistohourAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, string toTs, string extraParams, bool? sign)
        {
            return HistohourAsync(tryConversion, fsym, tsym, e, aggregate, limit, toTs, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Historical Hourly OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> HistohourAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, string toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsym == null)
                throw new System.ArgumentNullException("tsym");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/histohour?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsym=").Append(System.Uri.EscapeDataString(ConvertToString(tsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (aggregate != null) urlBuilder_.Append("aggregate=").Append(System.Uri.EscapeDataString(ConvertToString(aggregate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toTs != null) urlBuilder_.Append("toTs=").Append(System.Uri.EscapeDataString(ConvertToString(toTs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Historical Minute OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> HistominuteAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, string toTs, string extraParams, bool? sign)
        {
            return HistominuteAsync(tryConversion, fsym, tsym, e, aggregate, limit, toTs, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Historical Minute OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> HistominuteAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, string toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsym == null)
                throw new System.ArgumentNullException("tsym");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/histominute?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsym=").Append(System.Uri.EscapeDataString(ConvertToString(tsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (aggregate != null) urlBuilder_.Append("aggregate=").Append(System.Uri.EscapeDataString(ConvertToString(aggregate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toTs != null) urlBuilder_.Append("toTs=").Append(System.Uri.EscapeDataString(ConvertToString(toTs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Historical Day OHLCV for a timestamp</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="ts">The unix timestamp of interest</param>
        /// <param name="calculationType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> PricehistoricalAsync(bool? tryConversion, string fsym, string tsyms, string e, int? ts, CalculationType? calculationType, string extraParams, bool? sign)
        {
            return PricehistoricalAsync(tryConversion, fsym, tsyms, e, ts, calculationType, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Historical Day OHLCV for a timestamp</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="ts">The unix timestamp of interest</param>
        /// <param name="calculationType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> PricehistoricalAsync(bool? tryConversion, string fsym, string tsyms, string e, int? ts, CalculationType? calculationType, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsyms == null)
                throw new System.ArgumentNullException("tsyms");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/pricehistorical?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsyms=").Append(System.Uri.EscapeDataString(ConvertToString(tsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (ts != null) urlBuilder_.Append("ts=").Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (calculationType != null) urlBuilder_.Append("calculationType=").Append(System.Uri.EscapeDataString(ConvertToString(calculationType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Historical Day Average Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="avgType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="uTCHourDiff">By deafult it does UTC, if you want a different time zone just pass the hour difference. For PST you would pass -8 for example.</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> DayAvgAsync(bool? tryConversion, string fsym, string tsym, string e, string toTs, AvgType? avgType, int? uTCHourDiff, string extraParams, bool? sign)
        {
            return DayAvgAsync(tryConversion, fsym, tsym, e, toTs, avgType, uTCHourDiff, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Historical Day Average Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="avgType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="uTCHourDiff">By deafult it does UTC, if you want a different time zone just pass the hour difference. For PST you would pass -8 for example.</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> DayAvgAsync(bool? tryConversion, string fsym, string tsym, string e, string toTs, AvgType? avgType, int? uTCHourDiff, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsym == null)
                throw new System.ArgumentNullException("tsym");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/dayAvg?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsym=").Append(System.Uri.EscapeDataString(ConvertToString(tsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toTs != null) urlBuilder_.Append("toTs=").Append(System.Uri.EscapeDataString(ConvertToString(toTs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (avgType != null) urlBuilder_.Append("avgType=").Append(System.Uri.EscapeDataString(ConvertToString(avgType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (uTCHourDiff != null) urlBuilder_.Append("UTCHourDiff=").Append(System.Uri.EscapeDataString(ConvertToString(uTCHourDiff, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>All the Exchanges and Trading Pairs</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> ExchangesAsync(string extraParams, bool? sign)
        {
            return ExchangesAsync(extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>All the Exchanges and Trading Pairs</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> ExchangesAsync(string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/all/exchanges?");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>All the Coins</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> CoinlistAsync(string extraParams, bool? sign)
        {
            return CoinlistAsync(extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>All the Coins</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> CoinlistAsync(string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/all/coinlist?");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Rate limits for your IP</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<object> LimitAsync()
        {
            return LimitAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Rate limits for your IP</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<object> LimitAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/stats/rate/limit");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(object); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<object>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(object);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
    
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    /// <summary>Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum CalculationType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Close")]
        Close = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MidHighLow")]
        MidHighLow = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "VolFVolT")]
        VolFVolT = 2,
    
    }
    
    /// <summary>Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.27.0 (Newtonsoft.Json v9.0.0.0)")]
    public enum AvgType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Close")]
        Close = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MidHighLow")]
        MidHighLow = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "VolFVolT")]
        VolFVolT = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.27.0 (Newtonsoft.Json v9.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}