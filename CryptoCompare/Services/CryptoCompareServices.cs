//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.15.3.0 (NJsonSchema v9.10.28.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

namespace CryptoCompare.Services
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface ICryptoCompareServices
    {
        /// <summary>Single Symbol Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, double>> PriceAsync(bool? tryConversion, string fsym, string tsyms, string e, string extraParams, bool? sign);
    
        /// <summary>Single Symbol Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, double>> PriceAsync(bool? tryConversion, string fsym, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Multiple Symbols Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>> PricemultiAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign);
    
        /// <summary>Multiple Symbols Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>> PricemultiAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Multiple Symbols Full Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PriceMultiFull> PricemultifullAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign);
    
        /// <summary>Multiple Symbols Full Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<PriceMultiFull> PricemultifullAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Generate Custom Average</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GenerateAverage> GenerateAvgAsync(string fsym, string tsym, string e, string extraParams, bool? sign);
    
        /// <summary>Generate Custom Average</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<GenerateAverage> GenerateAvgAsync(string fsym, string tsym, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Historical Daily OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="allData">Returns all data (only available on histo day)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricalData> HistodayAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, bool? allData, int? toTs, string extraParams, bool? sign);
    
        /// <summary>Historical Daily OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="allData">Returns all data (only available on histo day)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<HistoricalData> HistodayAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, bool? allData, int? toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Historical Hourly OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricalData> HistohourAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, int? toTs, string extraParams, bool? sign);
    
        /// <summary>Historical Hourly OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<HistoricalData> HistohourAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, int? toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Historical Minute OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<HistoricalData> HistominuteAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, int? toTs, string extraParams, bool? sign);
    
        /// <summary>Historical Minute OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<HistoricalData> HistominuteAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, int? toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Historical Day OHLCV for a timestamp</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="ts">The unix timestamp of interest</param>
        /// <param name="calculationType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>> PricehistoricalAsync(bool? tryConversion, string fsym, string tsyms, string e, int? ts, CalculationType? calculationType, string extraParams, bool? sign);
    
        /// <summary>Historical Day OHLCV for a timestamp</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="ts">The unix timestamp of interest</param>
        /// <param name="calculationType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>> PricehistoricalAsync(bool? tryConversion, string fsym, string tsyms, string e, int? ts, CalculationType? calculationType, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Historical Day Average Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="avgType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="uTCHourDiff">By deafult it does UTC, if you want a different time zone just pass the hour difference. For PST you would pass -8 for example.</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<DayAverage> DayAvgAsync(bool? tryConversion, string fsym, string tsym, string e, int? toTs, AvgType? avgType, int? uTCHourDiff, string extraParams, bool? sign);
    
        /// <summary>Historical Day Average Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="avgType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="uTCHourDiff">By deafult it does UTC, if you want a different time zone just pass the hour difference. For PST you would pass -8 for example.</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<DayAverage> DayAvgAsync(bool? tryConversion, string fsym, string tsym, string e, int? toTs, AvgType? avgType, int? uTCHourDiff, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Subs by Pair</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, SubscriptionByPair>> SubsAsync(string fsym, string tsyms, string extraParams, bool? sign);
    
        /// <summary>Subs by Pair</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, SubscriptionByPair>> SubsAsync(string fsym, string tsyms, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Subs Watchlist</summary>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, SubscriptionWatchlist>> SubsWatchlistAsync(string fsyms, string tsym, string extraParams, string sign);
    
        /// <summary>Subs Watchlist</summary>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, SubscriptionWatchlist>> SubsWatchlistAsync(string fsyms, string tsym, string extraParams, string sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>NewsProviders</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Provider>> ProvidersAsync(string extraParams, bool? sign);
    
        /// <summary>NewsProviders</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Provider>> ProvidersAsync(string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>LatestNewsArticles</summary>
        /// <param name="feeds">Specific news feeds to retrieve news from</param>
        /// <param name="lTs">Returns news before that timestamp</param>
        /// <param name="lang">Preferred language - English (EN) or Portuguese (PT)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Article>> NewsAsync(string feeds, int? lTs, Lang? lang, string extraParams, bool? sign);
    
        /// <summary>LatestNewsArticles</summary>
        /// <param name="feeds">Specific news feeds to retrieve news from</param>
        /// <param name="lTs">Returns news before that timestamp</param>
        /// <param name="lang">Preferred language - English (EN) or Portuguese (PT)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Article>> NewsAsync(string feeds, int? lTs, Lang? lang, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>All the Exchanges and Trading Pairs</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>>> ExchangesAsync(string extraParams, bool? sign);
    
        /// <summary>All the Exchanges and Trading Pairs</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>>> ExchangesAsync(string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>All the Coins</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CoinList> CoinlistAsync(string extraParams, bool? sign);
    
        /// <summary>All the Coins</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<CoinList> CoinlistAsync(string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Rate limits for your IP</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<Limit> LimitAsync();
    
        /// <summary>Rate limits for your IP</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        System.Threading.Tasks.Task<Limit> LimitAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class CryptoCompareServices : ICryptoCompareServices
    {
        private string _baseUrl = "";
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public CryptoCompareServices(string baseUrl)
        {
            BaseUrl = baseUrl; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Single Symbol Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, double>> PriceAsync(bool? tryConversion, string fsym, string tsyms, string e, string extraParams, bool? sign)
        {
            return PriceAsync(tryConversion, fsym, tsyms, e, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Single Symbol Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, double>> PriceAsync(bool? tryConversion, string fsym, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsyms == null)
                throw new System.ArgumentNullException("tsyms");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/price?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsyms=").Append(System.Uri.EscapeDataString(ConvertToString(tsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.Dictionary<string, double>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, double>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.Dictionary<string, double>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Multiple Symbols Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>> PricemultiAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign)
        {
            return PricemultiAsync(tryConversion, fsyms, tsyms, e, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Multiple Symbols Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>> PricemultiAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsyms == null)
                throw new System.ArgumentNullException("fsyms");
    
            if (tsyms == null)
                throw new System.ArgumentNullException("tsyms");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/pricemulti?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsyms=").Append(System.Uri.EscapeDataString(ConvertToString(fsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsyms=").Append(System.Uri.EscapeDataString(ConvertToString(tsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Multiple Symbols Full Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PriceMultiFull> PricemultifullAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign)
        {
            return PricemultifullAsync(tryConversion, fsyms, tsyms, e, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Multiple Symbols Full Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<PriceMultiFull> PricemultifullAsync(bool? tryConversion, string fsyms, string tsyms, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsyms == null)
                throw new System.ArgumentNullException("fsyms");
    
            if (tsyms == null)
                throw new System.ArgumentNullException("tsyms");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/pricemultifull?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsyms=").Append(System.Uri.EscapeDataString(ConvertToString(fsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsyms=").Append(System.Uri.EscapeDataString(ConvertToString(tsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(PriceMultiFull); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<PriceMultiFull>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(PriceMultiFull);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Generate Custom Average</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GenerateAverage> GenerateAvgAsync(string fsym, string tsym, string e, string extraParams, bool? sign)
        {
            return GenerateAvgAsync(fsym, tsym, e, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Generate Custom Average</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<GenerateAverage> GenerateAvgAsync(string fsym, string tsym, string e, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsym == null)
                throw new System.ArgumentNullException("tsym");
    
            if (e == null)
                throw new System.ArgumentNullException("e");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/generateAvg?");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsym=").Append(System.Uri.EscapeDataString(ConvertToString(tsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(GenerateAverage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<GenerateAverage>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(GenerateAverage);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Historical Daily OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="allData">Returns all data (only available on histo day)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoricalData> HistodayAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, bool? allData, int? toTs, string extraParams, bool? sign)
        {
            return HistodayAsync(tryConversion, fsym, tsym, e, aggregate, limit, allData, toTs, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Historical Daily OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="allData">Returns all data (only available on histo day)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<HistoricalData> HistodayAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, bool? allData, int? toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsym == null)
                throw new System.ArgumentNullException("tsym");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/histoday?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsym=").Append(System.Uri.EscapeDataString(ConvertToString(tsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (aggregate != null) urlBuilder_.Append("aggregate=").Append(System.Uri.EscapeDataString(ConvertToString(aggregate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (allData != null) urlBuilder_.Append("allData=").Append(System.Uri.EscapeDataString(ConvertToString(allData, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toTs != null) urlBuilder_.Append("toTs=").Append(System.Uri.EscapeDataString(ConvertToString(toTs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HistoricalData); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricalData>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(HistoricalData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Historical Hourly OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoricalData> HistohourAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, int? toTs, string extraParams, bool? sign)
        {
            return HistohourAsync(tryConversion, fsym, tsym, e, aggregate, limit, toTs, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Historical Hourly OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<HistoricalData> HistohourAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, int? toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsym == null)
                throw new System.ArgumentNullException("tsym");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/histohour?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsym=").Append(System.Uri.EscapeDataString(ConvertToString(tsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (aggregate != null) urlBuilder_.Append("aggregate=").Append(System.Uri.EscapeDataString(ConvertToString(aggregate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toTs != null) urlBuilder_.Append("toTs=").Append(System.Uri.EscapeDataString(ConvertToString(toTs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HistoricalData); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricalData>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(HistoricalData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Historical Minute OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<HistoricalData> HistominuteAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, int? toTs, string extraParams, bool? sign)
        {
            return HistominuteAsync(tryConversion, fsym, tsym, e, aggregate, limit, toTs, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Historical Minute OHLCV</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="aggregate">Time period to aggregate the data over (for daily it's days, for hourly it's hours and for minute histo it's minutes)</param>
        /// <param name="limit">The number of data points to return</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<HistoricalData> HistominuteAsync(bool? tryConversion, string fsym, string tsym, string e, int? aggregate, int? limit, int? toTs, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsym == null)
                throw new System.ArgumentNullException("tsym");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/histominute?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsym=").Append(System.Uri.EscapeDataString(ConvertToString(tsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (aggregate != null) urlBuilder_.Append("aggregate=").Append(System.Uri.EscapeDataString(ConvertToString(aggregate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (limit != null) urlBuilder_.Append("limit=").Append(System.Uri.EscapeDataString(ConvertToString(limit, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toTs != null) urlBuilder_.Append("toTs=").Append(System.Uri.EscapeDataString(ConvertToString(toTs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(HistoricalData); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricalData>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(HistoricalData);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Historical Day OHLCV for a timestamp</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="ts">The unix timestamp of interest</param>
        /// <param name="calculationType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>> PricehistoricalAsync(bool? tryConversion, string fsym, string tsyms, string e, int? ts, CalculationType? calculationType, string extraParams, bool? sign)
        {
            return PricehistoricalAsync(tryConversion, fsym, tsyms, e, ts, calculationType, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Historical Day OHLCV for a timestamp</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="ts">The unix timestamp of interest</param>
        /// <param name="calculationType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>> PricehistoricalAsync(bool? tryConversion, string fsym, string tsyms, string e, int? ts, CalculationType? calculationType, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsyms == null)
                throw new System.ArgumentNullException("tsyms");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/pricehistorical?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsyms=").Append(System.Uri.EscapeDataString(ConvertToString(tsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (ts != null) urlBuilder_.Append("ts=").Append(System.Uri.EscapeDataString(ConvertToString(ts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (calculationType != null) urlBuilder_.Append("calculationType=").Append(System.Uri.EscapeDataString(ConvertToString(calculationType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, double>>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Historical Day Average Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="avgType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="uTCHourDiff">By deafult it does UTC, if you want a different time zone just pass the hour difference. For PST you would pass -8 for example.</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<DayAverage> DayAvgAsync(bool? tryConversion, string fsym, string tsym, string e, int? toTs, AvgType? avgType, int? uTCHourDiff, string extraParams, bool? sign)
        {
            return DayAvgAsync(tryConversion, fsym, tsym, e, toTs, avgType, uTCHourDiff, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Historical Day Average Price</summary>
        /// <param name="tryConversion">If set to false, it will try to get only direct trading values</param>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="e">The exchange to obtain data from (our aggregated average - CCCAGG - by default)</param>
        /// <param name="toTs">Last unix timestamp to return data for</param>
        /// <param name="avgType">Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</param>
        /// <param name="uTCHourDiff">By deafult it does UTC, if you want a different time zone just pass the hour difference. For PST you would pass -8 for example.</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<DayAverage> DayAvgAsync(bool? tryConversion, string fsym, string tsym, string e, int? toTs, AvgType? avgType, int? uTCHourDiff, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            if (tsym == null)
                throw new System.ArgumentNullException("tsym");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/dayAvg?");
            if (tryConversion != null) urlBuilder_.Append("tryConversion=").Append(System.Uri.EscapeDataString(ConvertToString(tryConversion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsym=").Append(System.Uri.EscapeDataString(ConvertToString(tsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (e != null) urlBuilder_.Append("e=").Append(System.Uri.EscapeDataString(ConvertToString(e, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (toTs != null) urlBuilder_.Append("toTs=").Append(System.Uri.EscapeDataString(ConvertToString(toTs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (avgType != null) urlBuilder_.Append("avgType=").Append(System.Uri.EscapeDataString(ConvertToString(avgType, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (uTCHourDiff != null) urlBuilder_.Append("UTCHourDiff=").Append(System.Uri.EscapeDataString(ConvertToString(uTCHourDiff, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(DayAverage); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<DayAverage>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(DayAverage);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Subs by Pair</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, SubscriptionByPair>> SubsAsync(string fsym, string tsyms, string extraParams, bool? sign)
        {
            return SubsAsync(fsym, tsyms, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Subs by Pair</summary>
        /// <param name="fsym">The cryptocurrency symbol of interest</param>
        /// <param name="tsyms">Comma separated cryptocurrency symbols list to convert into</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, SubscriptionByPair>> SubsAsync(string fsym, string tsyms, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsym == null)
                throw new System.ArgumentNullException("fsym");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/subs?");
            urlBuilder_.Append("fsym=").Append(System.Uri.EscapeDataString(ConvertToString(fsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (tsyms != null) urlBuilder_.Append("tsyms=").Append(System.Uri.EscapeDataString(ConvertToString(tsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.Dictionary<string, SubscriptionByPair>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, SubscriptionByPair>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.Dictionary<string, SubscriptionByPair>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Subs Watchlist</summary>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, SubscriptionWatchlist>> SubsWatchlistAsync(string fsyms, string tsym, string extraParams, string sign)
        {
            return SubsWatchlistAsync(fsyms, tsym, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>Subs Watchlist</summary>
        /// <param name="fsyms">Comma separated cryptocurrency symbols list</param>
        /// <param name="tsym">The currency symbol to convert into</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, SubscriptionWatchlist>> SubsWatchlistAsync(string fsyms, string tsym, string extraParams, string sign, System.Threading.CancellationToken cancellationToken)
        {
            if (fsyms == null)
                throw new System.ArgumentNullException("fsyms");
    
            if (tsym == null)
                throw new System.ArgumentNullException("tsym");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/subsWatchlist?");
            urlBuilder_.Append("fsyms=").Append(System.Uri.EscapeDataString(ConvertToString(fsyms, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append("tsym=").Append(System.Uri.EscapeDataString(ConvertToString(tsym, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.Dictionary<string, SubscriptionWatchlist>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, SubscriptionWatchlist>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.Dictionary<string, SubscriptionWatchlist>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>NewsProviders</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Provider>> ProvidersAsync(string extraParams, bool? sign)
        {
            return ProvidersAsync(extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>NewsProviders</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Provider>> ProvidersAsync(string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/news/providers?");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Provider>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Provider>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Provider>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>LatestNewsArticles</summary>
        /// <param name="feeds">Specific news feeds to retrieve news from</param>
        /// <param name="lTs">Returns news before that timestamp</param>
        /// <param name="lang">Preferred language - English (EN) or Portuguese (PT)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Article>> NewsAsync(string feeds, int? lTs, Lang? lang, string extraParams, bool? sign)
        {
            return NewsAsync(feeds, lTs, lang, extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>LatestNewsArticles</summary>
        /// <param name="feeds">Specific news feeds to retrieve news from</param>
        /// <param name="lTs">Returns news before that timestamp</param>
        /// <param name="lang">Preferred language - English (EN) or Portuguese (PT)</param>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<Article>> NewsAsync(string feeds, int? lTs, Lang? lang, string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/news/?");
            if (feeds != null) urlBuilder_.Append("feeds=").Append(System.Uri.EscapeDataString(ConvertToString(feeds, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lTs != null) urlBuilder_.Append("lTs=").Append(System.Uri.EscapeDataString(ConvertToString(lTs, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (lang != null) urlBuilder_.Append("lang=").Append(System.Uri.EscapeDataString(ConvertToString(lang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.ObjectModel.ObservableCollection<Article>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<Article>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.ObjectModel.ObservableCollection<Article>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>All the Exchanges and Trading Pairs</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>>> ExchangesAsync(string extraParams, bool? sign)
        {
            return ExchangesAsync(extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>All the Exchanges and Trading Pairs</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>>> ExchangesAsync(string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/all/exchanges?");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>>); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>>>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.ObservableCollection<string>>>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>All the Coins</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<CoinList> CoinlistAsync(string extraParams, bool? sign)
        {
            return CoinlistAsync(extraParams, sign, System.Threading.CancellationToken.None);
        }
    
        /// <summary>All the Coins</summary>
        /// <param name="extraParams">The name of your application (we recommend you send it)</param>
        /// <param name="sign">If set to true, the server will sign the requests (be default we don't sign them), this is useful for usage in smart contracts</param>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<CoinList> CoinlistAsync(string extraParams, bool? sign, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/data/all/coinlist?");
            if (extraParams != null) urlBuilder_.Append("extraParams=").Append(System.Uri.EscapeDataString(ConvertToString(extraParams, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (sign != null) urlBuilder_.Append("sign=").Append(System.Uri.EscapeDataString(ConvertToString(sign, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(CoinList); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<CoinList>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(CoinList);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        /// <summary>Rate limits for your IP</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Limit> LimitAsync()
        {
            return LimitAsync(System.Threading.CancellationToken.None);
        }
    
        /// <summary>Rate limits for your IP</summary>
        /// <returns>Status 200</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        public async System.Threading.Tasks.Task<Limit> LimitAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/stats/rate/limit");
    
            var client_ = new System.Net.Http.HttpClient();
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        foreach (var item_ in response_.Content.Headers)
                            headers_[item_.Key] = item_.Value;
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            var result_ = default(Limit); 
                            try
                            {
                                result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<Limit>(responseData_, _settings.Value);
                                return result_; 
                            } 
                            catch (System.Exception exception_) 
                            {
                                throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, headers_, exception_);
                            }
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, headers_, null);
                        }
            
                        return default(Limit);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (client_ != null)
                    client_.Dispose();
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
    
            return System.Convert.ToString(value, cultureInfo);
        }
    }
    
    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FullData 
    {
        [Newtonsoft.Json.JsonProperty("TYPE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TYPE { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MARKET", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MARKET { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FROMSYMBOL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FROMSYMBOL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TOSYMBOL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TOSYMBOL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FLAGS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FLAGS { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PRICE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PRICE { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTUPDATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LASTUPDATE { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTVOLUME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LASTVOLUME { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTVOLUMETO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LASTVOLUMETO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTTRADEID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTTRADEID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUMEDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VOLUMEDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUMEDAYTO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VOLUMEDAYTO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUME24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VOLUME24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUME24HOURTO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VOLUME24HOURTO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OPENDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OPENDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HIGHDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HIGHDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LOWDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LOWDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OPEN24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OPEN24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HIGH24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HIGH24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LOW24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LOW24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTMARKET", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTMARKET { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGE24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CHANGE24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEPCT24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CHANGEPCT24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CHANGEDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEPCTDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CHANGEPCTDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SUPPLY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? SUPPLY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MKTCAP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MKTCAP { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TOTALVOLUME24H", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TOTALVOLUME24H { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TOTALVOLUME24HTO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TOTALVOLUME24HTO { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FullData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FullData>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class FullDisplayData 
    {
        [Newtonsoft.Json.JsonProperty("FROMSYMBOL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FROMSYMBOL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TOSYMBOL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TOSYMBOL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MARKET", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MARKET { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PRICE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PRICE { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTUPDATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTUPDATE { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTVOLUME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTVOLUME { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTVOLUMETO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTVOLUMETO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTTRADEID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTTRADEID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUMEDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VOLUMEDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUMEDAYTO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VOLUMEDAYTO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUME24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VOLUME24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUME24HOURTO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VOLUME24HOURTO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OPENDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OPENDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HIGHDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HIGHDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LOWDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LOWDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OPEN24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OPEN24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HIGH24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HIGH24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LOW24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LOW24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTMARKET", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTMARKET { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGE24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CHANGE24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEPCT24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CHANGEPCT24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CHANGEDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEPCTDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CHANGEPCTDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SUPPLY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SUPPLY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MKTCAP", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MKTCAP { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TOTALVOLUME24H", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TOTALVOLUME24H { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TOTALVOLUME24HTO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TOTALVOLUME24HTO { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static FullDisplayData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<FullDisplayData>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PriceMultiFull 
    {
        [Newtonsoft.Json.JsonProperty("RAW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, FullData>> RAW { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DISPLAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.Dictionary<string, FullDisplayData>> DISPLAY { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static PriceMultiFull FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<PriceMultiFull>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AverageData 
    {
        [Newtonsoft.Json.JsonProperty("MARKET", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MARKET { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FROMSYMBOL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FROMSYMBOL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TOSYMBOL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TOSYMBOL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FLAGS", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FLAGS { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PRICE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PRICE { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTUPDATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LASTUPDATE { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTVOLUME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LASTVOLUME { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTVOLUMETO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LASTVOLUMETO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTTRADEID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTTRADEID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUME24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VOLUME24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUME24HOURTO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? VOLUME24HOURTO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OPEN24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? OPEN24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HIGH24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? HIGH24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LOW24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? LOW24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTMARKET", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTMARKET { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGE24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CHANGE24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEPCT24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CHANGEPCT24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CHANGEDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEPCTDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CHANGEPCTDAY { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AverageData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AverageData>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class AverageDisplayData 
    {
        [Newtonsoft.Json.JsonProperty("FROMSYMBOL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FROMSYMBOL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TOSYMBOL", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TOSYMBOL { get; set; }
    
        [Newtonsoft.Json.JsonProperty("MARKET", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MARKET { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PRICE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PRICE { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTUPDATE", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTUPDATE { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTVOLUME", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTVOLUME { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTVOLUMETO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTVOLUMETO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTTRADEID", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTTRADEID { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUME24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VOLUME24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("VOLUME24HOURTO", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string VOLUME24HOURTO { get; set; }
    
        [Newtonsoft.Json.JsonProperty("OPEN24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OPEN24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("HIGH24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HIGH24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LOW24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LOW24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("LASTMARKET", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LASTMARKET { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGE24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CHANGE24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEPCT24HOUR", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CHANGEPCT24HOUR { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CHANGEDAY { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CHANGEPCTDAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CHANGEPCTDAY { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static AverageDisplayData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<AverageDisplayData>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GenerateAverage 
    {
        [Newtonsoft.Json.JsonProperty("RAW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AverageData RAW { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DISPLAY", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AverageDisplayData DISPLAY { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static GenerateAverage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<GenerateAverage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Data 
    {
        [Newtonsoft.Json.JsonProperty("time", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Time { get; set; }
    
        [Newtonsoft.Json.JsonProperty("close", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Close { get; set; }
    
        [Newtonsoft.Json.JsonProperty("high", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? High { get; set; }
    
        [Newtonsoft.Json.JsonProperty("low", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Low { get; set; }
    
        [Newtonsoft.Json.JsonProperty("open", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Open { get; set; }
    
        [Newtonsoft.Json.JsonProperty("volumefrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Volumefrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("volumeto", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Volumeto { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Data FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Data>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ConversionType 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("conversionSymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConversionSymbol { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static ConversionType FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<ConversionType>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class HistoricalData 
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Response { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Aggregated", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Aggregated { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<Data> Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TimeFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TimeFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FirstValueInArray", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? FirstValueInArray { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ConversionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConversionType ConversionType { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static HistoricalData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<HistoricalData>(data);
        }
    }
        
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DayAverage 
    {
        [Newtonsoft.Json.JsonProperty("ConversionType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConversionType ConversionType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("additionalProperties", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? AdditionalProperties { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DayAverage FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DayAverage>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class DefaultWatch 
    {
        [Newtonsoft.Json.JsonProperty("CoinIs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoinIs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sponsored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Sponsored { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static DefaultWatch FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<DefaultWatch>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CoinData 
    {
        [Newtonsoft.Json.JsonProperty("Id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ImageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ImageUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Symbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Symbol { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CoinName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CoinName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Algorithm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Algorithm { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ProofType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProofType { get; set; }
    
        [Newtonsoft.Json.JsonProperty("FullyPremined", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullyPremined { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCoinSupply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalCoinSupply { get; set; }
    
        [Newtonsoft.Json.JsonProperty("PreMinedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PreMinedValue { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalCoinsFreeFloat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TotalCoinsFreeFloat { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SortOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SortOrder { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Sponsored", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Sponsored { get; set; }
    
        [Newtonsoft.Json.JsonProperty("IsTrading", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsTrading { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CoinData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoinData>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CoinList 
    {
        [Newtonsoft.Json.JsonProperty("Response", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Response { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BaseImageUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseImageUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("BaseLinkUrl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BaseLinkUrl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("DefaultWatchlist", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public DefaultWatch DefaultWatchlist { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Data", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.Dictionary<string, CoinData> Data { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Type", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Type { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CoinList FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CoinList>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CallData 
    {
        [Newtonsoft.Json.JsonProperty("CallsMade", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Call CallsMade { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CallsLeft", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Call CallsLeft { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static CallData FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CallData>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Call 
    {
        [Newtonsoft.Json.JsonProperty("Histo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Histo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("News", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? News { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Strict", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Strict { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Call FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Call>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Limit 
    {
        [Newtonsoft.Json.JsonProperty("Message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Hour", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CallData Hour { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Minute", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CallData Minute { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Second", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CallData Second { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Limit FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Limit>(data);
        }
    }
    
    /// <summary>Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum CalculationType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Close")]
        Close = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MidHighLow")]
        MidHighLow = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "VolFVolT")]
        VolFVolT = 2,
    
    }
    
    /// <summary>Type of average to calculate (Close - a Close of the day close price, MidHighLow - the average between the 24 H high and low, VolFVolT - the total volume to / the total volume from)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum AvgType
    {
        [System.Runtime.Serialization.EnumMember(Value = "Close")]
        Close = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "MidHighLow")]
        MidHighLow = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = "VolFVolT")]
        VolFVolT = 2,
    
    }
    
    /// <summary>Preferred language - English (EN) or Portuguese (PT)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Lang
    {
        [System.Runtime.Serialization.EnumMember(Value = "EN")]
        EN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = "PT")]
        PT = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SubscriptionByPair 
    {
        [Newtonsoft.Json.JsonProperty("TRADES", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> TRADES { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CURRENT", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> CURRENT { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CURRENTAGG", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CURRENTAGG { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SubscriptionByPair FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubscriptionByPair>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SubscriptionWatchlist 
    {
        [Newtonsoft.Json.JsonProperty("Conversion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Conversion { get; set; }
    
        [Newtonsoft.Json.JsonProperty("ConversionSymbol", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ConversionSymbol { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CurrencyFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyFrom { get; set; }
    
        [Newtonsoft.Json.JsonProperty("CurrencyTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyTo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Market", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Market { get; set; }
    
        [Newtonsoft.Json.JsonProperty("Supply", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Supply { get; set; }
    
        [Newtonsoft.Json.JsonProperty("TotalVolume24H", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? TotalVolume24H { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubBase", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SubBase { get; set; }
    
        [Newtonsoft.Json.JsonProperty("SubsNeeded", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> SubsNeeded { get; set; }
    
        [Newtonsoft.Json.JsonProperty("RAW", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.ObjectModel.ObservableCollection<string> RAW { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static SubscriptionWatchlist FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<SubscriptionWatchlist>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Provider 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lang", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lang { get; set; }
    
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Provider FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Provider>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Article 
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("guid", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Guid { get; set; }
    
        [Newtonsoft.Json.JsonProperty("published_on", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Published_on { get; set; }
    
        [Newtonsoft.Json.JsonProperty("imageurl", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Imageurl { get; set; }
    
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }
    
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tags { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lang", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lang { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source_info", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Source_info Source_info { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Article FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Article>(data);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.10.28.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Source_info 
    {
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lang", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Lang { get; set; }
    
        [Newtonsoft.Json.JsonProperty("img", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Img { get; set; }
    
    
        public string ToJson() 
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }
        
        public static Source_info FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Source_info>(data);
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException : System.Exception
    {
        public string StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.15.3.0 (NJsonSchema v9.10.28.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, string statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}